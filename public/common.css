html {
	--out-width: 88vmin; /* * 1% of the viewport's smaller dimension */
	--font-size: calc(var(--out-width)/8);	/* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries */
	/*--font-size: calc(11vmin);*/	/* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries */
	--small-font-size: calc(var(--font-size)*0.7);	/* если сказать em, то величиной будет em, а не вычисленное в этот момент значение. Поэтому -- вычисляется */
	--ltl-font-size: calc(var(--font-size)*0.4);
	--ltl1-font-size: calc(var(--font-size)*0.3);
	--ltl2-font-size: calc(var(--font-size)*0.22);
	--pico-font-size: calc(var(--font-size)*0.2);
}
body {
	margin: 0;
	padding: 0;
	width: 100%;
	height: 100%;	

	/*border:solid blue;*/
}
#wrapper {
	display: grid;
	/* Если содержимое не влезает, то оно шире viewport, и обрезается справа */
	/*grid-template-columns: 5% 30% 30% 30% 5%;*/
	/*grid-template-columns: 5vw 30vw 30vw 30vw 5vw;*/	/* это проценты имеющейся ширины body */
	grid-template-columns: 5% 1fr 1fr 1fr 5%; 

	/*grid-template-rows: 5vh 30% 30% 30% 5vh;*/
	/*grid-template-rows: 5vh 30vh 30vh 30vh 5vh;*/
	grid-template-rows: 5vh 1fr 1fr 1fr 5vh; 

	/* А это проценты от вычисленого размера compass, хотя они и должны совпадать с высотой ландшафтного экрана. */
	/*grid-template-rows: calc(var(--out-width)*0.05) calc(var(--out-width)*0.3) calc(var(--out-width)*0.3) calc(var(--out-width)*0.3) calc(var(--out-width)*0.05);*/

	/* Нам нужно избавиться от полос прокрутки, которая появляется из-за расширения блока compass 
	когда углы блоков подписей картушки вылезают за его границы.
	При этом overflow: hidden; именно в этом блоке делает его ширину 100% viewport, а если
	указать overflow: hidden; в body - то ширина body становится меньше viewport и переменной.
	Фигня какая-то...
	*/
	overflow: hidden; 	
	width: 100%;
	/*если не указать 100%, то кривой Chrome странно увеличивает размер шрифта во всех блоках 
	снаружи компаса. Может быть, следует указать для них position: relative; ? */
	height: 100%;	
	margin: 0;
	padding-bottom: 0;
	font-size: var(--font-size);
	
	/*border:solid green;*/
}
/*svg {
	 border:solid red;
}*/
/* Стили меню режимов */
#modeMenuIcon {
	grid-column-start: 5;
	grid-column-end: 6;
	grid-row-start: 1;
	grid-row-end: 2;
	margin: auto 0.1em auto auto;
	width: calc(var(--out-width)/25);

	/*border:solid green;*/
}
#modeMenu {
	grid-column-start: 1;
	grid-column-end: 6;
	grid-row-start: 2;
	grid-row-end: 4;
	display: flow; /* Вложенные объекты будут подчиняться обычным правилам размещения */
	position: relative; /* Тогда этот блок будет содержащим для вложенных блоков, но никуда не будет сдвинут за отсутствием указания. Вообще-то, это костыль... */

	border: solid black;
	border-radius: calc(var(--out-width)*0.02);
	/* Поскольку высота ячейки grid меняется с изменением размера шрифта в угловых блоках (почему?)
	то высота этого блока фиксирована и чуть меньше нормальной высоты ячейки, а сам блок
	выровнен к концу ячейки, чтобы не менял положения с изменением высоты ячейки. Пурга какая-то...
	*/
	margin: 0 0.5em;
	width: 98%;
	height: calc(var(--out-width)*0.6);
	align-self: start;
	/* Непрозрачный фон и выше всего на 10. 
	Тогда закрывает и компас, который всегда сверху, потому что крутится */
	background-color: white;
	z-index: 10;
	font-size: var(--ltl2-font-size);
}
#modeMenu input[type="submit"]  {
	font-size:110%; 
	width: 5em; 

	position:absolute; 
	bottom:0.5em; 
	right:0.5em; 

	background:white; 
	text-align:center;
}
#resetToDefaultButton  {
	font-size:110%; 
	padding: 0 2em;

	position:absolute; 
	bottom:0.5em; 
	left:0.5em; 

	background:white; 
	text-align:center;
}
.withBorder {
	border: solid black;
	border-radius: calc(var(--out-width)*0.02);
	margin: 0.1em;
}
.modeMenuBlock {
	overflow: auto; /* Это заставляет учитывать высоту вложенного блока float в высоте этого блока.  */
	margin: 0.5em 0 0 0;
}
#modeMenu .radio {
	width:calc(var(--ltl2-font-size)*1.5);
	height:calc(var(--ltl2-font-size)*1.5);
}
/* Стили блоков данных */
#topMessage {
	grid-column-start: 2;
	grid-column-end: 5;
	grid-row-start: 1;
	grid-row-end: 2;
	display: grid; 
	font-size: var(--pico-font-size);
	text-align: center;
	
	/*display:inherit; border:solid green;*/
}
#bottomMessage {
	grid-column-start: 2;
	grid-column-end: 5;
	grid-row-start: 5;
	grid-row-end: 6;
	display: grid; 
	font-size: var(--pico-font-size);
	text-align: center;
	align-self: end;
	/*display:inherit; border:solid green;*/
}
#leftTopBlock {
	grid-column-start: 1;
	grid-column-end: 3;
	grid-row-start: 2;
	grid-row-end: 5;
	display: grid; 
	font-size: calc(var(--font-size)*1.4);
	text-align: left;
	line-height: 0.7;
	height: fit-content;
	/*align-self: start;	это умолчальное значение */
	margin: 0.1em 0 0 0.1em;

	/*border:solid green;*/
}
.leftTopBlockBig {
	grid-column-end: 4 !important;
	grid-row-end: 4 !important;
	/*font-size: calc(var(--font-size)*2.8) !important;*/
	font-size: 3em !important;

	/*border:solid green;*/
}
#rightTopBlock {
	grid-column-start: 4;
	grid-column-end: 6;
	grid-row-start: 2;
	grid-row-end: 3;
	display: grid; 
	/*font-size: var(--font-size);*/
	font-size: calc(var(--font-size)*1.4);
	text-align: right;
	line-height: 0.7;
	height: fit-content;
	/*align-self: start;	это умолчальное значение */
	margin: 0.1em 0.1em 0 0;

	/*border:solid green;*/
}
.rightTopBlockBig {
	grid-column-start: 3 !important;
	grid-row-end: 4 !important;
	font-size: 3em !important;

	/*border:solid green;*/
}

#leftBottomBlock {
	grid-column-start: 1;
	grid-column-end: 3;
	grid-row-start: 4;
	grid-row-end: 5;
	font-size: calc(var(--font-size)*1.4);
	text-align: left;
	display: grid; 
	line-height: 0.7;
	height: fit-content;
	align-self: end;
	margin: 0 0 0.1em 0.1em;

	/*border:solid green;*/
}
.leftBottomBlockBig {
	grid-column-end: 4 !important;
	grid-row-start: 3 !important;
	font-size: 3em !important;

	/*border:solid green;*/
}
#rightBottomBlock {
	grid-column-start: 4;
	grid-column-end: 6;
	grid-row-start: 4;
	grid-row-end: 5;
	display: grid; 
	/*font-size: calc(var(--font-size)*1.4)  !important;*/
	font-size: 1.4em;
	text-align: right;
	line-height: 0.7;
	align-self: end;
	margin: 0 0.1em 0.1em 0;

	/*border:solid green;*/
}
.rightBottomBlockBig {
	grid-column-start: 3 !important;
	grid-column-end: 6;
	grid-row-start: 3 !important;
	grid-row-end: 5;
	font-size: 3em !important;
	/*border:solid green;*/
}

.rightBottomFrameBlinker {
	padding: 0 0.05em 0.05em 0;
	border-width: 0 0.1em 0.1em 0;
	border-style: none  solid solid none;
	animation: frameblinker 3s step-start infinite;
}
.leftBottomFrameBlinker {
	padding: 0 0 0.05em 0.05em;
	margin: 0;
	border-width: 0 0 0.1em 0.1em;
	border-style: none none solid solid;
	animation: frameblinker 3s step-start infinite;
}
@keyframes frameblinker{
	50% { border-color: white; }
}

#MOBmessage {
	grid-column-start: 1;
	grid-column-end: 6;
	grid-row-start: 4;
	grid-row-end: 6;
	text-align: center;
	position: relative; /* Вложенные объекты будут подчиняться обычным правилам размещения */

	/* Поскольку высота ячейки grid меняется с изменением размера шрифта в угловых блоках (почему?)
	то высота этого блока фиксирована и чуть меньше нормальной высоты ячейки, а сам блок
	выровнен к концу ячейки, чтобы не менял положения с изменением высоты ячейки. Пурга какая-то...
	*/
	margin: 0 auto;
	width: 98%;
	height: calc(var(--out-width)*0.3);
	align-self: end;
	/* Непрозрачный фон и выше всего на 10. 
	Тогда закрывает и компас, который всегда сверху, потому что крутится */
	background-color: white;
	z-index: 10;
	font-size: var(--ltl1-font-size);
}
.messageButton {
	display: inline-block;
	width: fit-content;
}
.messageButton img{
	width: 1em;
	vertical-align: baseline;
	margin: 0 1em 0;
}


/* Стили кнопок */
#mobButton {
	grid-column-start: 1;
	grid-column-end: 3;
	grid-row-start: 4;
	grid-row-end: 6;
	align-self: end;
	
	text-align: center;

	display: grid; 
	width: calc(var(--out-width)*0.5);
	margin: 0.1em 0.1em;
}
#mobButton img{
	height: var(--ltl1-font-size);
	vertical-align: middle;
	margin: 0 auto;
}



/* стили компаса */
#compass {
	--collisionArrowWidthBig: var(--center-icon-size);
	--collisionArrowLeftBig: calc(var(--out-width)/2 - var(--collisionArrowWidthBig)/2);
	--collisionArrowWidthNormal: calc(var(--collisionArrowWidthBig)*0.75);
	--collisionArrowLeftNormal: calc(var(--out-width)/2 - var(--collisionArrowWidthNormal)/2);
	--collisionArrowWidthSmall: calc(var(--collisionArrowWidthBig)*0.5);
	--collisionArrowLeftSmall: calc(var(--out-width)/2 - var(--collisionArrowWidthSmall)/2);
	--collisionArrowWidthLitle: calc(var(--collisionArrowWidthBig)*0.3);
	--collisionArrowLeftLitle: calc(var(--out-width)/2 - var(--collisionArrowWidthLitle)/2);
	--center-icon-size: calc(var(--out-width)/4);
	
	/* Определим этот блок как containing block, потому что grod block не является таковым? 
	А раньше являлся?*/
	position: relative;	
	grid-column-start: 2;
	grid-column-end: 5;
	grid-row-start: 2;
	grid-row-end: 5;
	margin: 0 auto 0 auto;	/* Центирируется по горизонтали сам блок и вложенное, потому что наследуется */
	/*overflow: hidden; 	 Размер этого блока определяет размер окружности картушки compassCard, но блоки внутри окружности при повороте углами вылезают за границу этого блока, и появляется полоса прокрутки. */
	
	/*border: solid red;*/
}
#compassMessage {
	font-size: 0.5em;
	text-align: center;

	height: var(--center-icon-size);
	width: var(--center-icon-size);

	position: absolute;
	/* Я не знаю, почему так, и чем отличается этот блок от center_icon */
	top: calc(var(--out-width)/2 - var(--center-icon-size)/2);
	/*top: calc(50% - var(--center-icon-size)/2);*/
	left: calc(var(--out-width)/2 - var(--center-icon-size)/2);
	/*left: calc(50% - var(--center-icon-size)/2);*/

	/*border:solid green;*/
}
/* стили картушки компаса */
#compassCard {
	border: solid black;
	container-type: inline-size;
	width: var(--out-width);
	height: var(--out-width);
	border-radius: 50%;
	font-family: MonoSpace;
}
.compas-face-scale {
	position: static !important;
	height: fit-content !important;
	width: auto !important;
	font-size: var(--pico-font-size);
	margin: 0 auto 0 auto;
	
	/*border: solid red;*/
}
.compass-face div {
	/*border: solid red;*/

	position: absolute;

	height: calc(var(--out-width)/2);
	width: calc(var(--font-size)*2);	/* три ширины символа: (--font-size * 2 / 3) * 3 */
	top: 0;	/*поскольку высота равна радиусу, низ "спицы" будет в центре окружности .compass*/
	left: calc(var(--out-width)/2 - var(--font-size));	/*ширина - 1/2 ширины строки*/
	text-align: center;
	transform-origin: bottom center;	/* относительно чего вращать */
}

.charN { 
	/*border: solid green;*/
}
.charNNE { 
	font-size: var(--ltl-font-size);
	transform: rotate(22.5deg); 
}
.charNE { 
	font-size: var(--small-font-size);
	transform: rotate(45deg); 
}
.charENE { 
	font-size: var(--ltl-font-size);
	transform: rotate(67.5deg); 
}
.charE { 
	transform: rotate(90deg); 
}
.charESE { 
	font-size: var(--ltl-font-size);
	transform: rotate(112.5deg); 
}
.charSE { 
	font-size: var(--small-font-size);
	transform: rotate(135deg); 
}
.charSSE { 
	font-size: var(--ltl-font-size);
	transform: rotate(157.5deg); 
}
.charS { 
	transform: rotate(180deg); 
}
.charSSW { 
	font-size: var(--ltl-font-size);
	transform: rotate(202.5deg); 
}
.charSW { 
	font-size: var(--small-font-size);
	transform: rotate(225deg); 
}
.charWSW { 
	font-size: var(--ltl-font-size);
	transform: rotate(247.5deg); 
}
.charW { 
	transform: rotate(270deg); 
}
.charWNW { 
	font-size: var(--ltl-font-size);
	transform: rotate(292.5deg); 
}
.charNW { 
	font-size: var(--small-font-size);
	transform: rotate(315deg); 
}
.charNNW { 
	font-size: var(--ltl-font-size);
	transform: rotate(337.5deg); 
}
#center_marc_streak{
	/*border: solid red;*/

	height: var(--out-width);
	width: auto;

	position: absolute;
	top: 2px;
	left: calc(var(--out-width)/2 + 2px);
	/*left: 50%;*/
}

/* Центральная картинка */
#center_icon {
	/*border: solid red;*/

	height: var(--center-icon-size);
	width: var(--center-icon-size);

	position: absolute;
	top: calc(var(--out-width)/2 - var(--center-icon-size)/2);
	left: calc(var(--out-width)/2 - var(--center-icon-size)/2 + 3px);
}
#windSVGimage {
	/*border: solid red;*/

	width: calc(var(--out-width)/2 - var(--pico-font-size));

	position: absolute;
	top: 50%;
	left: 50%;
	transform-origin: top left;	/* относительно чего вращать */
}

#collisionArrows div {
	/*border: solid red;*/
	
	position: absolute;
	height: calc(var(--out-width)/2 - var(--ltl-font-size));
	width: var(--collisionArrowWidthBig);
	top: var(--ltl-font-size);
	left: var(--collisionArrowLeftBig);
	
	transform-origin: bottom center;	/* относительно чего вращать */
}
.collisionArrowImg {
	/*border: solid green;*/
	width: 100%;
	vertical-align: top;
}

#mobMark {
	position: absolute;
	height: calc(var(--out-width)/2);
	width: var(--font-size);
	top: 0;
	left: var(--collisionArrowLeftSmall);
	
	transform-origin: bottom center;	/* относительно чего вращать */

	/*border: solid red;*/
}
#mobMark img{
	position: relative;
	top: calc(0px - var(--font-size)*0.75);
	width: 100%;
}

#nextPointDirection {
	/*border: solid red;*/
	
	position: absolute;
	height: calc(var(--out-width)/2);
	width: calc(var(--collisionArrowWidthLitle)*0.8);
	top: 0;
	left: calc(var(--collisionArrowLeftLitle)*1.02);
	
	transform-origin: bottom center;	/* относительно чего вращать */
}
#nextPointDirection svg {
	/*border: solid green;*/
	position: relative;
	top: calc(0px - var(--collisionArrowWidthLitle)*0.25);
	width: 100%;
	vertical-align: top;
}



.blink{	
	animation: blinker 1s step-start infinite;
}
@keyframes blinker{
	50% { opacity: 0; }
}

.opa {
	opacity: 25%;
}
